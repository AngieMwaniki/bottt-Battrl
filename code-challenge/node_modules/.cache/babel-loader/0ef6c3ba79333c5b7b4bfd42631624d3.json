{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/moringa/Downloads/Phase-2-Hooks-Code-Challenge-Bot-Battlr-100421 (1)/code-challenge/src/components/BotsPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport YourBotArmy from \"./YourBotArmy\";\nimport BotCollection from \"./BotCollection\";\n\nfunction BotsPage() {\n  _s();\n\n  const [bots, setBots] = useState([]);\n  const [selectedBots, setSelectedBots] = useState([]);\n  useEffect(() => {\n    fetch(\"http://localhost:8002/bots\").then(response => response.json()).then(data => setBots(data));\n  }, []);\n\n  function deletebot(bot) {\n    const filterbots = bots.filter(singlebot => singlebot.id !== bot.id);\n    const deleteConfig = {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    fetch(`http://localhost:8002/bots/${bot.id}`, deleteConfig).then(() => setBots(filterbots));\n  }\n\n  function addToMyBotArmy(bot) {\n    setSelectedBots(prevbot => {\n      return [...prevbot, bot];\n    });\n  }\n\n  console.log(addToMyBotArmy);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(YourBotArmy, {\n      bots: selectedBots\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(BotCollection, {\n      addToMyBotArmy: addToMyBotArmy,\n      deleteBot: deletebot,\n      bots: bots\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 1\n  }, this);\n}\n\n_s(BotsPage, \"TwrI/hBcYDvWOBig+T/CrRDqW8g=\");\n\n_c = BotsPage;\nexport default BotsPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"BotsPage\");","map":{"version":3,"sources":["/home/moringa/Downloads/Phase-2-Hooks-Code-Challenge-Bot-Battlr-100421 (1)/code-challenge/src/components/BotsPage.js"],"names":["React","useEffect","useState","YourBotArmy","BotCollection","BotsPage","bots","setBots","selectedBots","setSelectedBots","fetch","then","response","json","data","deletebot","bot","filterbots","filter","singlebot","id","deleteConfig","method","headers","addToMyBotArmy","prevbot","console","log"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAcC,SAAd,EAAwBC,QAAxB,QAAuC,OAAvC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;;AAEA,SAASC,QAAT,GAAoB;AAAA;;AACpB,QAAM,CAACC,IAAD,EAAMC,OAAN,IAAiBL,QAAQ,CAAC,EAAD,CAA/B;AACA,QAAM,CAACM,YAAD,EAAeC,eAAf,IAAkCP,QAAQ,CAAC,EAAD,CAAhD;AAEAD,EAAAA,SAAS,CAAC,MAAI;AACdS,IAAAA,KAAK,CAAC,4BAAD,CAAL,CACCC,IADD,CACOC,QAAD,IAAYA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEOG,IAAD,IAAQP,OAAO,CAACO,IAAD,CAFrB;AAGC,GAJQ,EAIP,EAJO,CAAT;;AAKA,WAASC,SAAT,CAAmBC,GAAnB,EAAuB;AACvB,UAAMC,UAAU,GAAGX,IAAI,CAACY,MAAL,CAClBC,SAAD,IAAeA,SAAS,CAACC,EAAV,KAAiBJ,GAAG,CAACI,EADjB,CAAnB;AAGA,UAAMC,YAAY,GAAG;AACrBC,MAAAA,MAAM,EAAE,QADa;AAErBC,MAAAA,OAAO,EAAE;AACT,wBAAgB;AADP;AAFY,KAArB;AAMAb,IAAAA,KAAK,CAAE,8BAA6BM,GAAG,CAACI,EAAG,EAAtC,EAAwCC,YAAxC,CAAL,CACCV,IADD,CACM,MAAIJ,OAAO,CAACU,UAAD,CADjB;AAEC;;AACD,WAASO,cAAT,CAAwBR,GAAxB,EAA4B;AAC5BP,IAAAA,eAAe,CAAEgB,OAAD,IAAW;AAC3B,aAAO,CAAC,GAAGA,OAAJ,EAAYT,GAAZ,CAAP;AACC,KAFc,CAAf;AAGC;;AACDU,EAAAA,OAAO,CAACC,GAAR,CAAYH,cAAZ;AACA,sBACA;AAAA,4BACA,QAAC,WAAD;AAAa,MAAA,IAAI,EAAEhB;AAAnB;AAAA;AAAA;AAAA;AAAA,YADA,eAEA,QAAC,aAAD;AAAe,MAAA,cAAc,EAAEgB,cAA/B;AAA+C,MAAA,SAAS,EAAET,SAA1D;AAAqE,MAAA,IAAI,EAAET;AAA3E;AAAA;AAAA;AAAA;AAAA,YAFA;AAAA;AAAA;AAAA;AAAA;AAAA,UADA;AAMC;;GAlCQD,Q;;KAAAA,Q;AAoCT,eAAeA,QAAf","sourcesContent":["import React,{useEffect,useState} from \"react\";\nimport YourBotArmy from \"./YourBotArmy\";\nimport BotCollection from \"./BotCollection\";\n\nfunction BotsPage() {\nconst [bots,setBots] = useState([]) \nconst [selectedBots, setSelectedBots] = useState([])\n\nuseEffect(()=>{\nfetch(\"http://localhost:8002/bots\")\n.then((response)=>response.json())\n.then((data)=>setBots(data))\n},[])\nfunction deletebot(bot){\nconst filterbots = bots.filter(\n(singlebot) => singlebot.id !== bot.id\n);\nconst deleteConfig = {\nmethod: \"DELETE\",\nheaders: {\n\"Content-Type\": \"application/json\",\n} \n}\nfetch(`http://localhost:8002/bots/${bot.id}`,deleteConfig)\n.then(()=>setBots(filterbots))\n}\nfunction addToMyBotArmy(bot){\nsetSelectedBots((prevbot)=>{\nreturn [...prevbot,bot]\n})\n}\nconsole.log(addToMyBotArmy)\nreturn (\n<div>\n<YourBotArmy bots={selectedBots}/>\n<BotCollection addToMyBotArmy={addToMyBotArmy} deleteBot={deletebot} bots={bots} />\n</div>\n)\n}\n\nexport default BotsPage;"]},"metadata":{},"sourceType":"module"}